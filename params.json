{"name":"Ptlib","tagline":"","body":"\t\t\tPortable Tools Libary\r\n\t\t\t=====================\r\n\r\n\r\nContents\r\n--------\r\n\r\n   1.  Introduction\r\n   2.  Apologies\r\n   3.  CVS Access\r\n   4.  Building PTLib\r\n   5.  Using PTLib\r\n   6.  IPv6 issues\r\n   7.  Platform Specific Issues\r\n   8.  Conclusion\r\n   9.  Licensing\r\n\r\n\r\n\r\n================================================================================\r\n\r\n1. Introduction\r\n---------------\r\n\r\nPTLib (Portable Tools Library) is a moderately large class library that has it's\r\ngenesis many years ago as PWLib (portable Windows Library), a method to product\r\napplications to run on both Microsoft Windows and Unix systems. It has also been\r\nported to other systems such as Mac OSX, VxWorks and other embedded systems\r\n\r\nSince then the system has grown to include many classes that assist in writing\r\ncomplete multi-platform applications. Classes for I/O portability, multi-\r\nthreading portability, aid in producing unix daemons and NT services portably\r\nand all sorts of internet protocols were added over the years. So it became a\r\nPortable Tools Library and was renamed to PTLib.\r\n\r\nAll this over and above basic \"container\" classes such as arrays, linear lists,\r\nsorted lists (RB Tree) and dictionaries (hash tables) which were all created\r\nbefore STL was standardized. Future versions of PTLib will see many of these\r\nclasses replaced or supplemented by STL.\r\n\r\nThe library was used extensively for all our in-house products. Then we decided\r\nto support the Open H323 project by throwing in some of the code written for\r\none of our products. Thus, required PTLib so it got thrown into the open source\r\nworld as well.\r\n\r\n\r\n\r\n================================================================================\r\n\r\n2. Apologies (not)\r\n------------------\r\n\r\nAs you start using the library, the inevitable question \"why did they do it that\r\nway?\" will come up. The more experienced out there will know that there are\r\nseveral reasons for the way things are:\r\n\r\n   *   Carefully considered design,\r\n   *   Workarounds for portability and compiler subtleties,\r\n   *   History, it may be too hard to change an early design decision,\r\n   *   Complete arbitrariness, the absence of any compelling reason.\r\n\r\nSo, when you ask the next question \"why didn't you do it this way?\" The answer\r\nwill be one of the above. The last one being a synonym for \"we didn't think of\r\nthat!\"\r\n\r\nThe bottom line is, use the library as is or change it as you require. You can\r\neven send in suggestions for improvements (or merely changes) and we may (or may\r\nnot) include them in the base line code. Just do not send us any mail starting\r\nwith the words \"Why did you...\" as the answer is quite likely to be \"Because!\"\r\n\r\n\r\n\r\n================================================================================\r\n\r\n3. SVN Access\r\n-------------\r\n\r\nThere is a public SVN archive available at svn.sourceforge.net. To extract, use a\r\ncommand line like the following:\r\n\r\n    cvs -z3 -d :pserver:anonymous@cvs.sourceforge.net:/cvsroot/openh323 co module\r\n\r\nwhere \"module\" is one of the module names specified above.\r\n\r\nIf you would like see the structure of the CVS, then use the View CVS tool at:\r\n\r\n    http://cvs.sourceforge.net/viewcvs.py/openh323/\r\n\r\n\r\n================================================================================\r\n\r\n4. Building PTLib\r\n-----------------\r\n\r\nThis library is multi-platform, however there are only two major build systems\r\nthat are used. The Microsoft DevStudio environment for Windows and the GNU make\r\nsystem for all of the various unix systems.\r\n\r\nSPECIAL NOTE FOR MSVC 6 USERS:\r\n------------------------------\r\nIf you are using MSVC 6 then please run the \"msvc6_upgrade.bat\" script in the \r\nPTLib top directory before continuing. If you skip this step, you will not\r\nbe able to compile PTLib on MSVC 6. If you change the build environment to bypass \r\nthis step, then DLL versions of PTLib will not function correctly. For more \r\ninformation, please see:\r\n\r\nhttp://www.voxgratia.org/docs/ptlib_windows.html#msvc_headers \r\n\r\n\r\nActually, better yet, UPGRADE YOUR COMPILER!!!!\r\n\r\n\r\n4.1. For Windows\r\n----------------\r\n\r\nNote that more complete instructions can be found at the following URL, but here \r\nare the basics:\r\n\r\n    http://www.voxgratia.org/docs/ptlib_windows.html \r\n\r\n1.  Note you will need the bison and flex tools to compile some parts of the\r\n    system. You can get a copy from http://www.openh323.org/bin/flexbison.zip,\r\n    follow the instructions included in that package and put the executables\r\n    somewhere in your path.\r\n\r\n2.  Start DevStudio .NET 2003 or .NET 2005. MSVC v6 may work, but is no longer\r\n    actively supported. If you have another compiler you are on your own! Add\r\n    these directories to the Include Files path as follows:\r\n    \r\n    In VisualStudio v7/8, go into the Tools menu, Options item. In the Options\r\n    dialog, open the Projects folder, VC++ Directories item. In the 'Show\r\n    Directories for:' list, select 'Include files'.\r\n\t\r\n\t\tC:\\PTLib\\Include\r\n\t\t\r\n    Add the following to the Lib Files path and the Executable Files path:\r\n\t\r\n\t\tC:\\PTLib\\Lib\r\n\t\t\r\n    The Lib folder is created as parts of PTLib are built. Also add this\r\n    directory to your PATH environment variable (so the MergeSym tool can \r\n    be found).\r\n\r\n3.  Open the ptlib.sln or ptlib_2005.sln file for DevStudio 2003 or 2005\r\n    respectively.\r\n\r\n4.  Select Release mode and build MergeSym.\r\n\r\n    The build should automatically create a file ptlib/include/ptbuildopts.h\r\n    via the configure.exe program that should be in the ptlib directory. If\r\n    you have any problems try running the program directly from a command\r\n    line. Use \".\\configure --help\" to get information on options such as\r\n    forcing a feature or library dependency.\r\n\r\n    The above will search the entire hard disk(s) for software packages to\r\n    configure. This may take some time, so a useful feature is to set the\r\n    environment variable:\r\n\r\n\tPTLIB_CONFIGURE_OPTIONS = --no-search\r\n\r\n    which will only search some \"standard\" locations. Not ethat you could\r\n    also include arguments to set the paths of packages that are not in\r\n    standard locations.\r\n\r\n    Note there are additional notes in the \"Platform Specific Issues\" on how\r\n    to compile the various libraries in a manner suitable for use by PTLib\r\n    under Windows.\r\n\r\n5.  You can then build the entire solution for Release, Debug and No Trace\r\n    versions as you require.\r\n\r\n5.  That's it, now you're on your own!\r\n\r\n\r\n\r\nThese are the project relationships:\r\n\r\nproject             dependencies                             output\r\n-------             ------------                             ------\r\nConsole             (none)                                   ptlibs.lib\r\nMergeSym            ptlibs.lib                               mergesym.exe\r\nPTLib               ptlibs.lib, mergesym.exe                 ptlib.dll & lib\r\nXMLRPC              ptlibs.lib, ptclib.lib                   xmlrpc.exe\r\n\r\nDebug versions append 'd' to filename, ie: ptlibsd.lib.\r\n\r\nMSDevWizard will not build in VisualStudio v7 and so is not included as a project.\r\n\r\n\r\n\r\n--------------------------------------------------------------------------------\r\n4.2. For unix.\r\n--------------\r\n\r\n1.\tIf you have not put ptlib it into your home directory (~/ptlib) then\r\n\tyou will have to define the environment variable PTLIBDIR to point to\r\n\tthe correct directory.\r\n\r\n        Also make sure you have added the PTLib lib directory (e.g.\r\n        $PTLIBDIR/lib_linux_x86) to your LD_LIBRARY_PATH environment variable\r\n        if you intend to use shared libraries (the default).\r\n\r\n2.\tBuild the debug and release versions of the PTLib library as follows:\r\n\t\tcd ~/ptlib\r\n        ./configure\r\n\t\tmake\r\n\tThis may take some time. Note, you will need bison and flex for this to\r\n\tcompile, most unix systems have these. WARNING: there is a bug in most \r\n\tof the bison.simple files. See below for details.\r\n\r\n\tPTLib requires GNU Make. If GNU Make (gmake) is not your default make\r\n\tprogram (eg FreeBSD users), you will need to install GNU Make first\r\n\tand then use\r\n\t\tcd ~/ptlib\r\n        ./configure\r\n\t\tgmake\r\n\r\n\r\n\tIf you are getting huge numbers of errors during the compile, then it \r\n        is likely your platform is not supported, or you have incorrectly set \r\n        the OSTYPE and MACHTYPE variables.\r\n\r\n3.\tThat's all there is to it, you are now on your own!\r\n\r\n\r\n\r\nBison problem under Unix\r\n\r\nThe bison.simple file on many releases will not compile with the options used \r\nby the PTLib getdate.y grammar. The options are required to make the date \r\nparser thread safe so it is necessary to edit the bison.simple file to fix the \r\nproblem.\r\n\r\nThe file is usually at /usr/lib/bison.simple but in the tradition of unix \r\ncould actually be anywhere. We leave it up to you to find it.\r\n\r\nThe code:\r\n\r\n\t/* Prevent warning if -Wstrict-prototypes. */\r\n\t#ifdef __GNUC__\r\n\tint yyparse (void);\r\n\t#endif\r\n\r\nshould be changed to\r\n\r\n\t/* Prevent warning if -Wstrict-prototypes. */\r\n\t#ifdef __GNUC__\r\n\t#ifndef YYPARSE_PARAM\r\n\tint yyparse (void);\r\n\t#endif\r\n\t#endif\r\n\r\nTo prevent the incorrect function prototype from being defined. The getdate.y \r\nshould then produce a getdate.tab.c file that will actually compile.\r\n\r\n\r\n\r\n\r\n================================================================================\r\n\r\n5. Using PTLib\r\n--------------\r\n\r\nWhat documentation there is consists of this document and all of the header\r\nfiles. It was intended that a post processer go through the header files and\r\nproduces HTML help files, but this never got completed.\r\n\r\n\r\n5.1. Tutorial\r\n-------------\r\n\r\nDetailed tutorials will almost certainly not be forthcoming. However, at least\r\ngiving you an indication on how to start an application would be useful, so\r\nhere is the infamous \"Hello world!\" program.\r\n\r\n\r\n// hello.cxx\r\n\r\n#include <ptlib.h>\r\n\r\nclass Hello : public PProcess\r\n{\r\n  PCLASSINFO(Hello, PProcess)\r\n  public:\r\n    void Main();\r\n};\r\n\r\nPCREATE_PROCESS(Hello)\r\n\r\nvoid Hello::Main()\r\n{\r\n  cout << \"Hello world!\\n\";\r\n}\r\n\r\n// End of hello.cxx\r\n\r\n\r\nThe CREATE_PROCESS macro actually defines the main() function and creates an\r\ninstance of Hello. This assures that everything is initialised in the correct\r\norder. C++ does initialisation of global statics badly (and destruction is even\r\nworse), so try to put everything into your PProcess descedent rather than\r\nglobals.\r\n\r\nA GUI application is very similar but is descended off PApplication rather than\r\nPProcess, and would create a window as a descendent off the PMainWindow class.\r\n\r\nThe following is a simple Makefile for Unix platforms for the hello world \r\nprogram.\r\n\r\n\r\n# Simple makefile for PTLib\r\n\r\nPROG    = hello\r\nSOURCES = hello.cxx\r\n\r\nifndef PTLIBDIR\r\nPTLIBDIR=$(HOME)/ptlib\r\nendif\r\n\r\ninclude $(PTLIBDIR)/make/ptlib.mak\r\n\r\n# End of Makefile\r\n\r\n\r\n\r\n--------------------------------------------------------------------------------\r\n5.2. PTlib Classes\r\n------------------\r\n\r\nThe classes in PTLib fall into the following broad categories\r\n\r\n\tContainers\r\n\tI/O\r\n\tThreads & Processes\r\n\r\n\r\n5.2.1. Containers\r\n\r\nWhile there are a number of container classes you wourld rarely actually descend\r\noff them, you would use macros that declare type safe descendents. These are\r\nsimply templates instantiations when using a compiler that supports templates\r\nin a simple manner (GNU C++ does not qualify in our opinion).\r\n\r\n5.2.2. I/O\r\n\r\nThere are many classes descendend from a basic primitive call a PChannel, which\r\nrepresents an entity for doing I/O. There are classes for files, serial ports,\r\nvarious types of socket and pipes to sub-processes.\r\n\r\n5.2.3. Threads & Processes\r\n\r\nThese classes support lightweight threading and functionality to do with the\r\nprocess as a whole (for example argument parsing). The threading will be\r\npre-emptive on platforms that support it (Win32, platforms with pthreads eg\r\nLinux and FreeBSD) and cooperative on those that don't.\r\n\r\n\r\n\r\n\r\n================================================================================\r\n\r\n6. IPv6 support in ptlib\r\n------------------------\r\n\r\nThe IPv6 support in PTlib is supported and can be enabled or disabled via\r\nthe configure program.\r\n\r\nWhen compiled with the IPv6 support, applications using only IPv4 are still \r\nfully backward compatible. PTLib is able to manage simultaneously IPv4 and\r\nIPv6 connections.\r\n\r\n\r\n\r\n--------------------------------------------------------------------------------\r\n6.1. Windows platforms\r\n----------------------\r\n\r\nAccording to microsoft, IPv6 is not supported under 9x, experimental on Win2000, \r\nsupported on XP.\r\nYou must use a compiler with IPv6 aware includes and libraries:\r\n  - VC6 must be patched to support RFC 2553 structure. (See 7.1 and 7.2 for patch)\r\n  - .Net should be ok (to be confirmed)\r\nThe port as been performed with VC6 patched on a win2000 platform.\r\n\r\nFor more informations about IPv6 support:\r\n  Microsoft IPv6 support: \r\n    http://research.microsoft.com/msripv6/\r\n  IPv6 for win2000: \r\n    http://msdn.microsoft.com/downloads/sdks/platform/tpipv6.asp\r\n  IPv6 for XP: \r\n    http://www.microsoft.com/windowsxp/pro/techinfo/administration/ipv6/default.asp\r\n\r\n\r\n\r\n6.1.1. Windows platforms: Win2000\r\n---------------------------------\r\nGo to Microsoft win2000 IPv6 tech preview web page.\r\nhttp://msdn.microsoft.com/downloads/sdks/platform/tpipv6.asp\r\nDownload the 'tpipv6-001205.exe' file and read carrefully the faq.\r\nhttp://msdn.microsoft.com/downloads/sdks/platform/tpipv6/faq.asp\r\n\r\nThis program is designed for win2000 English Service pack 1.\r\nTo install it on newer Service pack, you have to modify some files.\r\nAgain, read the Faq.\r\n \r\nThis install the IPv6 driver and the IPv6 includes.\r\n\r\n\r\n\r\n6.1.2. Windows platforms: XP\r\n----------------------------\r\nRead the IPv6 faq for windows XP\r\nhttp://www.microsoft.com/windowsxp/pro/techinfo/administration/ipv6/default.asp\r\n\r\nThe 'ipv6 install' command installs only the IPv6 drivers.\r\nYou need to install additionnals IPv6 includes for VC6.\r\n.NET should be ready. (to be confirmed ....)\r\n\r\n\r\n\r\n6.1.3. Compiling\r\n----------------\r\nTo compile ptlib and openh323 with the IPv6 support you have to set an \r\nenvironment variable:\r\nIPV6FLAG=1\r\nSet it using: [Start]/[Configuration pannel]/[System]/[Environment]\r\n\r\nAdd the IPv6 SDK include path in your Visual C++ 6 environment:\r\n[Tools]/[Options]/[Directories]/[Include files]\r\n\r\n\r\n\r\n--------------------------------------------------------------------------------\r\n6.2. Linux platforms\r\n--------------------\r\n\r\nRecent Linux distributions support IPv6.\r\n2.4 kernels are IPv6 aware.\r\n\r\nLinux IPv6 Faq:\r\nhttp://www.tldp.org/HOWTO/Linux+IPv6-HOWTO/\r\n\r\n\r\n\r\n6.2.1. Enabling IPv6 support\r\n----------------------------\r\nIPv6 can be compiled statically in the kernel or compiled as a module.\r\nTo load the IPv6 module, as 'root'\r\n#modprobe ipv6\r\n\r\n\r\n\r\n6.2.2. Compiling\r\n--------------\r\nCheck that IPv6 is really on\r\n#ls /proc/net/if_inet6\r\nIf this file exists, then IPv6 support is compiled in ptlib and openh323.\r\n\r\n\r\n\r\n--------------------------------------------------------------------------------\r\n6.3. Testing\r\n------------\r\n\r\nThe test application sources can be found in the directory: openh323/samples/simple\r\nOnce compiled the binaries are in simple/debug, release, obj_linux_x86_d, or\r\nobj_linux_x86_r.\r\nUnder windows, the test application is simple.exe\r\nUnder linux, the test application is simh323\r\nIPv6 support can be tested on only one machine. Just open two shell/command windows.\r\n\r\n\r\n\r\n6.3.1. IPv6 Address and port notation\r\n-------------------------------------\r\nIPv4 address and port are written in dot notation: xx.xx.xx.xx:4000\r\nIPv6 global address are written in semi-colon notation: [xx:xx:xx:xx::xx]:4000\r\nIPv6 scoped address ad a field for the scope: [xx:xx:xx:xx::xx%scope]:4000\r\n\r\nExemples:\r\nGlobal address\r\n[3ffe:0b80:0002:f9c1:0000:0000:500b:0ea5]:4000\r\n[3ffe:0b80:0002:f9c1::500b:0ea5]:4000\r\n\r\nScoped address\r\n[fe80::232:56ff:fe95:315%lnc0]:4000\r\nScoped address are not supported yet.\r\n\r\n\r\n\r\n6.3.2. Tests configuration\r\n--------------------------\r\nTests 1,2,3 run on a single dual stack machine.\r\n  IPv4 Address: 127.0.0.1, 10.0.0.6\r\n  IPv6 Address: ::1, 3ffe:0b80:0002:f9c1:0000:0000:500b:0ea5\r\n\r\nTests 4,5,6 run on two dual stack machine.\r\nPC1\r\n  IPv4 Address: 10.0.0.6\r\n  IPv6 Address: ::1, 3ffe:0b80:0002:f9c1:0000:0000:500b:0ea5\r\nPC2\r\n  IPv4 Address: 10.0.0.8\r\n  IPv6 Address: ::1, 3ffe:0b80:0002:f9c1:0000:0000:500b:0eb6\r\n\r\n\r\n\r\n6.3.3. Test 1: IPv4 <--> IPv4 local call\r\n----------------------------------------\r\nThis test checks the backward compatibility with IPv4\r\n\r\nIn first shell/command window, listen on 127.0.0.1, wait for a call.\r\nsimple.exe -tttt -n -i 127.0.0.1 -l -a\r\nIn second shell/command window, listen on 10.0.0.6, call 127.0.0.1\r\nsimple.exe -tttt -n -i  10.0.0.6 -n 127.0.0.1\r\n\r\n\r\n\r\n6.3.4. Test 2: IPv6 <--> IPv6 local call \r\n----------------------------------------\r\nThis test checks the IPv6 support\r\n\r\nIn first shell/command window, listen on ::1, wait for a call.\r\nsimple.exe -tttt -n -i ::1 -l -a\r\nIn second shell/command window, listen on IPv6 address, call ::1\r\nsimple.exe -tttt -n -i 3ffe:0b80:0002:f9c1:0000:0000:500b:0ea5 -n [::1]\r\n\r\n\r\n6.3.5. Test 3: IPv4 <--> IPv6 local call\r\n----------------------------------------\r\nThis test checks that simultaneous IPv4 and IPv6 calls are supported.\r\n\r\nIn first shell/command window, listen on 127.0.0.1, wait for a call.\r\nsimple.exe -tttt -n -i 127.0.0.1 -l -a\r\nIn second shell/command window, listen on IPv6 address, call 127.0.0.1\r\nsimple.exe -tttt -n -i 3ffe:0b80:0002:f9c1:0000:0000:500b:0ea5 -n 127.0.0.1\r\n\r\n\r\n\r\n6.3.6. Test 4: IPv4 <--> IPv4 call between two hosts\r\n----------------------------------------------------\r\nThis test checks the backward compatibility with IPv4\r\n\r\nFirst host, listen on 10.0.0.6, wait for a call.\r\nsimple.exe -tttt -n -i 127.0.0.1 -l -a\r\nSecond host, listen on 10.0.0.8, call 10.0.0.6\r\nsimple.exe -tttt -n -i  10.0.0.8 -n 10.0.0.6\r\n\r\n\r\n\r\n6.3.7. Test 5: IPv6 <--> IPv6 call between two hosts\r\n----------------------------------------------------\r\nThis test checks the IPv6 support\r\n\r\nFirst host, listen on 3ffe:0b80:0002:f9c1:0000:0000:500b:0ea5, wait for a call.\r\nsimple.exe -tttt -n -i 3ffe:0b80:0002:f9c1:0000:0000:500b:0ea5 -l -a\r\nSecond host, listen on 3ffe:0b80:0002:f9c1:0000:0000:500b:0eb6, call 3ffe:0b80:0002:f9c1:0000:0000:500b:0ea5\r\nsimple.exe -tttt -n -i 3ffe:0b80:0002:f9c1:0000:0000:500b:0eb6 -n [3ffe:0b80:0002:f9c1:0000:0000:500b:0ea5]\r\n\r\n\r\n\r\n6.3.8. Test 6: IPv4 <--> IPv6 call between two hosts\r\n----------------------------------------------------\r\nThis test checks that simultaneous IPv4 and IPv6 calls are supported.\r\n\r\nFirst host, listen on 10.0.0.6, wait for a call.\r\nsimple.exe -tttt -n -i 10.0.0.6 -l -a\r\nSecond host, listen on 3ffe:0b80:0002:f9c1:0000:0000:500b:0eb6, call 10.0.0.6\r\nsimple.exe -tttt -n -i 3ffe:0b80:0002:f9c1:0000:0000:500b:0eb6 -n 10.0.0.6\r\n\r\n\r\n\r\n--------------------------------------------------------------------------------\r\n6.4. Known limitations\r\n--------------------\r\n\r\nYou must use IPv6 address with global scope. Tests with IPv6 local link address\r\nfail.\r\n\r\n\r\n\r\n--------------------------------------------------------------------------------\r\n6.5. Questions\r\n--------------\r\n\r\n6.5.1. How to patch my VC6 includes files ?\r\n-----------------------------------------\r\n\r\nTo patch you Developper studio Visual C++ version 6, just edit the file\r\n\"C:\\Program Files\\Microsoft Visual Studio\\VC98\\Include\\ws2tcpip.h\", and add\r\nthe sin6_scope_id field in the sockadd_in6 structure.\r\nstruct sockaddr_in6 {\r\n          short     sin6_family;         /* AF_INET6 */\r\n          u_short sin6_port;  /* Transport level port number */\r\n          u_long    sin6_flowinfo; /* IPv6 flow information */\r\n          struct in_addr6 sin6_addr; /* IPv6 address */\r\n          u_long    sin6_scope_id; /* scope id (new in RFC2553) */ <--- Add this one\r\n};\r\n\r\nThis may have an impact on you system stability, use it only on\r\nexperimental platforms. Using .NET compiler should be a better solution.\r\n\r\n\r\n\r\n6.5.2. Why do I need to modify my Visual C++6 include files ? \r\n-----------------------------------------------------------\r\n\r\nVisual Studio C++ version 6 implements the old RFC 2133 in file \"ws2tcpip.h\".\r\nRFC 2133 defines a 24 byte sockaddr_in6 structure.\r\nstruct sockaddr_in6 {\r\n          short     sin6_family;         /* AF_INET6 */\r\n          u_short sin6_port;  /* Transport level port number */\r\n          u_long    sin6_flowinfo; /* IPv6 flow information */\r\n          struct in_addr6 sin6_addr; /* IPv6 address */\r\n};\r\n\r\n\r\nThis RFC as been replaced by RFC 2553.\r\nRFC 2133 defines a 28 byte addsock_in6 structure.\r\nstruct sockaddr_in6 {\r\n          short     sin6_family;         /* AF_INET6 */\r\n          u_short sin6_port;  /* Transport level port number */\r\n          u_long    sin6_flowinfo; /* IPv6 flow information */\r\n          struct in_addr6 sin6_addr; /* IPv6 address */\r\n          u_long    sin6_scope_id; /* scope id (new in RFC2553) */\r\n};\r\n\r\n\r\n\r\n6.5.3. How to get an ipv6 address with a Global scope ?\r\n-----------------------------------------------------\r\n\r\n6.5.3.1. Manually\r\n-----------------\r\n\r\nSet one manually if you're not connected to IPv4 Internet or IPv6 backbone:\r\n#ip -6 addr add 3ffe:0b80:0002:f9c1:0000:0000:500b:0ea5 dev eth0\r\n(this address is owned by freenet6.net).\r\n\r\nCheck the address is set.\r\n#ifconfig\r\neth0      Lien encap:Ethernet  HWaddr 00:08:D5:10:C7:BB\r\n          inet adr:12.0.0.2  Bcast:12.255.255.255  Masque:255.0.0.0\r\n          adr inet6: 3ffe:b80:2:f9c1::500b:ea5/128 Scope:Global  <- - - Ok, Global scope\r\n          adr inet6: fe80::208:c7ff:fe59:bbc7/10 Scope:Lien <- - - [ Can't use this one ]\r\n          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1\r\n          RX packets:0 errors:0 dropped:0 overruns:0 frame:0\r\n          TX packets:9 errors:0 dropped:0 overruns:9 carrier:0\r\n          collisions:0\r\n          RX bytes:0 (0.0 b)  TX bytes:534 (534.0 b)\r\n\r\n\r\n6.5.3.2. Tunnel broker\r\n----------------------\r\n\r\nGet one from a free IPv6 tunnel broker.\r\nExemple: \r\nhttp://www.freenet6.net : Canadian tunnel broker\r\nhttp://tb.ngnet.it      : Italian tunnel broker (Telecom Italia Research)\r\n\r\n\r\nNote: The current (10/2002) freenet6 windows binary is buggy, use it to get the \r\nvalues, and set manually your tunnel.\r\n\r\n\r\n\r\n--------------------------------------------------------------------------------\r\n6.6. Troubles\r\n------------\r\n\r\n6.6.1. Listen on ::1:1720 failed: Address family not supported by protocol\r\n-----------------------------------------------------------------------\r\nIPv6 module is not loaded in the kernel.\r\n#modprobe ipv6\r\n\r\n\r\n\r\n6.6.2. SimpleH323\tTCP Could not open H.323 listener port on 1720\r\n--------------------------------------------------------------\r\nAdd some traces: -t on the command line. \r\n\r\n\r\n\r\n6.6.3. SimpleH323\tTCP Listen on fe80::2b0:d0ff:fedf:d6bf:1720 failed: Invalid argument\r\n------------------------------------------------------------------------------------\r\nThis address is a local scope address. As the scope_id field is always set to 0,\r\nits value is invalid.\r\n\r\nUse address with global scope.\r\n\r\n\r\n\r\n\r\n================================================================================\r\n\r\n7. Platform Specific Issues\r\n---------------------------\r\nPTLib has been ported to several platforms. However on some systems not all of\r\nthe functionality has been implemented. This could be due to lack of support\r\nat the OS level or simply due to lack of time or documentation when developing\r\nthe port.\r\n\r\n\r\n--------------------------------------------------------------------------------\r\n7.1. FreeBSD Issues\r\n-------------------\r\n\r\nPort Maintained by Roger Hardiman <roger@freebsd.org>\r\nGetRouteTable() in socket.cxx has been added. It is used by\r\nOenH323Proxy, but is not fully tested.\r\n\r\n\r\n--------------------------------------------------------------------------------\r\n7.2. OpenBSD Issues\r\n-------------------\r\n\r\nPort Maintained by Roger Hardiman <roger@freebsd.org>\r\nGetRouteTable() in socket.cxx has been added. It is used by\r\nOenH323Proxy, but is not fully tested.\r\n\r\n\r\n--------------------------------------------------------------------------------\r\n7.3. NetBSD Issues\r\n------------------\r\n\r\nPort Maintained by Roger Hardiman <roger@freebsd.org>\r\nGetRouteTable() in socket.cxx has been added. It is used by\r\nOenH323Proxy, but is not fully tested.\r\n\r\nThere are now three ways to do pthreads in NetBSD.\r\na) unproven threads - from the packages tree.\r\nb) GNU pth threads - from the packages tree.\r\nc) Native pthreads - added to the kernel on 15th January 2003.\r\n\r\nThe choice can be made by editing ptlib/make/unix.mak\r\nNative threads is the default and the best solution.\r\n\r\n--------------------------------------------------------------------------------\r\n7.4. Mac OS X (Darwin) Issues\r\n-----------------------------\r\n\r\nPort maintained by Roger Hardiman <roger@freebsd.org> but recently\r\nShawn Pai-Hsiang Hsiao <shawn@eecs.harvard.edu> has been leading\r\ndevelopment.\r\nThreads cannot be suspended once they are running, and trying to Suspend\r\na running thread will generate an Assertion Error.\r\nTheads can be created in 'suspended' mode and then started with Resume\r\nThis is due to a lack of pthread_kill() in Dawrin 1.2\r\nSee http://www.publicsource.apple.com/bugs/X/Libraries/2686231.html\r\n\r\nGetRouteTable() in socket.cxx has been added. It is used by\r\nOenH323Proxy, but is not fully tested.\r\n\r\nlocaltime_r() and gm_time() are missing.\r\nSo in osutil.cxx I have implemented os_localtime() and os_gmtime()\r\nwith localtime() and gm_time() which may not be thread safe.\r\n\r\nThere is also no implementation for dynamic library functions.\r\n\r\nAudio is supported using the coreaudio library.\r\n\r\nVideo support is being added by Shawn and users interested in this should\r\ncheck Shawn's web site at http://sourceforge.net/projects/xmeeting/\r\n\r\n--------------------------------------------------------------------------------\r\n7.5. BeOS Issues\r\n----------------\r\n\r\nPort Maintained by Yuri Kiryanov <openh323@kiryanov.com>. \r\nCurrent version supported is BeOS 5.0.2. \r\n\r\nMost important issue is lack of variable sample frequency from system sound producer node.\r\nI made quite a few attempts to implement sound resampler in code, \r\neven with help of Be engineers, but eventually decided to wait until new Media Kit\r\nwith resampler built-in. \r\nAlso network code needed more things, as OOB, which was promised in BONE. \r\nBONE will allow to make less #defines in network code as well.\r\nAs update will hit the Net, I'll get back to it ASAP.  \r\n\r\nLook for more port-related info on http://www.dogsbone.com/be\r\n\r\n\r\n--------------------------------------------------------------------------------\r\n7.6. Windows CE Issues\r\n----------------------\r\n\r\nThere is a very old port that was maintained by Yuri Kiryanov <openh323@kiryanov.com>. \r\nfor 2.x and 3.x (PocketPC). But this is no longer supported. You are on your own.\r\nLook for more port-related info on http://www.pocketbone.com\r\n\r\nFor Windows Mobile 5 and Windows Mobile 6 these are supoported via DevStudio 2005,\r\njust follow the normal isntractions for Windows builds.\r\n\r\n\r\n--------------------------------------------------------------------------------\r\n7.7. Solaris Issues\r\n-------------------\r\nOn Solaris 8, you need to install GNU Ld (the loader) to get\r\nshared libraries to compile. (otherwise there is an error with -soname)\r\nYou can get around this by using the static libraries and\r\ncompiling with make optnoshared and make debugnoshared\r\n\r\nThere is currently no implementation of GetRouteTable() in socket.cxx\r\nso OpenH323Proxy will not work.\r\n\r\n\r\n--------------------------------------------------------------------------------\r\n7.8. Build libraries under Windows\r\n----------------------------------\r\n\r\nUnfortunately building libraries that were intended for Unix based systems\r\nunder Windows can sometimes be difficult. Here are some notes on the subsystems\r\nthat PTLib uses.\r\n\r\n7.8.1. OpenSSL under Windows\r\n----------------------------\r\nThe standard build for OpenSSL off http://www.openssl.org does work though it\r\nis rather tricky and requires things like Perl to be installed on your\r\nWindows box. However the build does work and is correct for PTlib use. Make\r\nsure you build the non-DLL Debug and Release versions.\r\n\r\n7.8.2. EXPAT under Windows\r\n---------------------------\r\nThe easiest way is to get the one in the OpenH323 CVS. This is guranteed to\r\nwork. Use the following command to do this:\r\n\r\n  cvs -d :pserver:anonymous@cvs.sourceforge.net:/cvsroot/openh323 co external/expat\r\n\r\nand then use the expat.dsw file to build the Debug and Release libraries.\r\n\r\n7.8.3. OpenLDAP under Windows\r\n---------------------------\r\nTo use OpenLDAP with PTLib you have to compile the OpenLDAP library as a DLL.\r\nUnfortunately, the standard distribution does not do this. So there is a file in\r\nPTLib called ptlib/tools/openldap-2.1.12-win32.zip which contains altered build\r\nfiles for that version of OpenLDAP. Note if you have a different version these\r\nfiles may not work.\r\n\r\nTo build the DLL:\r\n\r\n   1   Get OpenLDAP v 2.1.17 via tar file at\r\n         ftp://ftp.openldap.org/pub/OpenLDAP/openldap-release/openldap-2.1.17.tgz\r\n       or anonymous CVS using tag at\r\n         :pserver:anonymous@cvs.OpenLDAP.org:/repo/OpenLDAP\r\n       using tag OPENLDAP_REL_ENG_2_1_17\r\n   2   Unpack it somewhere, eg c:\\work\\openldap\r\n   3   Unzip the openldap-2.1.17-win32.zip file that directory\r\n   4   Open openldap/build/main.dsw\r\n   5   use Batch build to and select the \"dll\" project and build the \"DLL Debug\"\r\n       and \"DLL Release\" targets.\r\n   6   Put the resulting openldap/DLLRelease/openldap.dll and\r\n       openldap/DLLDebug/openldapd.dll files in your path.\r\n\r\n7.8.4 SDL under Windows\r\n-----------------------\r\nVersion 1.2.5 has support for Windows and MSVC so you just need to download it\r\nfrom http://www.libsdl.org/ and follow the build instructions.\r\n\r\n7.8.5 SASL under Windows\r\n------------------------\r\nThe standard distribution of Cyrus SASL comes with makefiles for Windows and\r\nclear instructions on how to build the library. The current implementation\r\nin PTLib was tested with Cyrus SASL version 2.1.18. Tarballs can be downloaded\r\nfrom:\r\n\r\n    http://asg.web.cmu.edu/sasl/sasl-library.html\r\n\r\n\r\n--------------------------------------------------------------------------------\r\n7.9. ESD (Esound)\r\n-----------------\r\n\r\nMost targets come with native sound support.\r\nHowever there is also support for the ESD (esound) daemon which provides\r\nfull duplex audio via network sockets.\r\nTo compile ptlib to use ESD, you need to set the ESDDIR environment variable\r\nto point to the directory you have installed ESD into.\r\nThen compile ptlib.\r\n\r\n\r\n================================================================================\r\n\r\n8. Conclusion\r\n-------------\r\n\r\nThis package is far from a \"product\". There is very limited documentation and\r\nsupport will be on an ad-hoc basis, send us an e-mail and we will probably\r\nanswer your question if it isn't too difficult.\r\n\r\nIt is supplied mainly to support the open H323 project, but that shouldn't stop\r\nyou from using it in whatever project you have in mind if you so desire. We like\r\nit and use it all the time, and we don't want to get into any religious wars of\r\nthis class library over that one.\r\n\r\n\r\n\r\n\r\n================================================================================\r\n\r\n9. Licensing                 \r\n------------\r\n\r\nThe bulk of this library is licensed under the MPL (Mozilla Public License)\r\nversion 1.0. In simple terms this license allows you to use the library for \r\nany purpose, commercial or otherwise, provided the library is kept in tact\r\nas a separate entity and any changes made to the library are made publicly\r\navailable under the same (MPL) license. It is important to realise that that \r\nrefers to changes to the library and not your application that is merely \r\nlinked to the library.\r\n\r\nNote that due to a restriction in the GPL, any application you write that \r\nuses anything another than GPL, eg our library with MPL, is technically in\r\nbreach of the GPL license. However, it should be noted that MPL does not\r\ncare about the license of the final application, and as only the author of\r\nthe GPL application is in breach of his own license and is unlikely to sue\r\nthemselves for that breach, in practice there is no problem with a GPL \r\napplication using an MPL or any other commercial library.\r\n\r\n\r\nThe random number generator is based on code originally by Bob Jenkins.\r\n\r\n\r\nPortions of this library are from the REGEX library and is under the\r\nfollowing license:\r\n\r\nCopyright 1992, 1993, 1994, 1997 Henry Spencer.  All rights reserved.\r\nThis software is not subject to any license of the American Telephone\r\nand Telegraph Company or of the Regents of the University of California.\r\n\r\nPermission is granted to anyone to use this software for any purpose on\r\nany computer system, and to alter it and redistribute it, subject\r\nto the following restrictions:\r\n\r\n1. The author is not responsible for the consequences of use of this\r\n   software, no matter how awful, even if they arise from flaws in it.\r\n\r\n2. The origin of this software must not be misrepresented, either by\r\n   explicit claim or by omission.  Since few users ever read sources,\r\n   credits must appear in the documentation.\r\n\r\n3. Altered versions must be plainly marked as such, and must not be\r\n   misrepresented as being the original software.  Since few users\r\n   ever read sources, credits must appear in the documentation.\r\n\r\n4. This notice may not be removed or altered.\r\n\r\n\r\nThe in-band DTMF decoding code was taken from FreeBSD's dtmfdecode.c\r\napplication written by Poul-Henning Kamp. It has the following\r\nlicense:\r\n * ----------------------------------------------------------------------------\r\n * \"THE BEER-WARE LICENSE\" (Revision 42):\r\n * <phk@FreeBSD.org> wrote this file.  As long as you retain this notice you\r\n * can do whatever you want with this stuff. If we meet some day, and you think\r\n * this stuff is worth it, you can buy me a beer in return.   Poul-Henning Kamp\r\n * ----------------------------------------------------------------------------\r\n\r\n\r\n\r\n================================================================================\r\nEquivalence Pty. Ltd.\r\nHome of OpenH323 and the Open Phone Abstraction Library (OPAL)\r\n\r\nsupport@equival.com.au\r\nhttp://www.equival.com.au (US Mirror - http://www.equival.com)\r\n\r\n================================================================================\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}